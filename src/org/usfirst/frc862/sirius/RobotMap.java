// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.sirius;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController collectorIntake;
    public static DigitalInput collectorBeamBreak;
    public static DoubleSolenoid collectorArm;
    public static CANTalon shooterFlywheelLeft;
    public static CANTalon shooterFlywheelRight;
    public static DoubleSolenoid shooterKicker;
    public static DigitalInput shooterBeamBreak;
    public static SpeedController driveTrainLeftMotor1;
    public static SpeedController driveTrainLeftMotor2;
    public static SpeedController driveTrainRightMotor1;
    public static SpeedController driveTrainRightMotor2;
    public static RobotDrive driveTrainDriveController;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static AnalogInput driveTrainFrontAmbientLight;
    public static AnalogInput driveTrainBackAmbientLight;
    public static Encoder pivotAngleEncoder;
    public static SpeedController pivotAngleMotor;
    public static DigitalInput pivotHallEffect;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        collectorIntake = new VictorSP(2);
        LiveWindow.addActuator("Collector", "Intake", (VictorSP) collectorIntake);
        
        collectorBeamBreak = new DigitalInput(4);
        LiveWindow.addSensor("Collector", "Beam Break", collectorBeamBreak);
        
        collectorArm = new DoubleSolenoid(11, 1, 0);
        LiveWindow.addActuator("Collector", "Arm", collectorArm);
        
        shooterFlywheelLeft = new CANTalon(2);
        LiveWindow.addActuator("Shooter", "Flywheel Left", shooterFlywheelLeft);
        
        shooterFlywheelRight = new CANTalon(1);
        LiveWindow.addActuator("Shooter", "Flywheel Right", shooterFlywheelRight);
        
        shooterKicker = new DoubleSolenoid(11, 2, 3);
        LiveWindow.addActuator("Shooter", "Kicker", shooterKicker);
        
        shooterBeamBreak = new DigitalInput(5);
        LiveWindow.addSensor("Shooter", "Beam Break", shooterBeamBreak);
        
        driveTrainLeftMotor1 = new VictorSP(8);
        LiveWindow.addActuator("Drive Train", "Left Motor 1", (VictorSP) driveTrainLeftMotor1);
        
        driveTrainLeftMotor2 = new VictorSP(9);
        LiveWindow.addActuator("Drive Train", "Left Motor 2", (VictorSP) driveTrainLeftMotor2);
        
        driveTrainRightMotor1 = new VictorSP(6);
        LiveWindow.addActuator("Drive Train", "Right Motor 1", (VictorSP) driveTrainRightMotor1);
        
        driveTrainRightMotor2 = new VictorSP(7);
        LiveWindow.addActuator("Drive Train", "Right Motor 2", (VictorSP) driveTrainRightMotor2);
        
        driveTrainDriveController = new RobotDrive(driveTrainLeftMotor1, driveTrainLeftMotor2,
              driveTrainRightMotor1, driveTrainRightMotor2);
        
        driveTrainDriveController.setSafetyEnabled(true);
        driveTrainDriveController.setExpiration(0.1);
        driveTrainDriveController.setSensitivity(0.5);
        driveTrainDriveController.setMaxOutput(1.0);

        driveTrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Encoder ", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Encoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainFrontAmbientLight = new AnalogInput(0);
        LiveWindow.addSensor("Drive Train", "Front Ambient Light", driveTrainFrontAmbientLight);
        
        driveTrainBackAmbientLight = new AnalogInput(1);
        LiveWindow.addSensor("Drive Train", "Back Ambient Light", driveTrainBackAmbientLight);
        
        pivotAngleEncoder = new Encoder(7, 8, true, EncodingType.k4X);
        LiveWindow.addSensor("Pivot", "Angle Encoder", pivotAngleEncoder);
        pivotAngleEncoder.setDistancePerPulse(1.0);
        pivotAngleEncoder.setPIDSourceType(PIDSourceType.kRate);
        pivotAngleMotor = new VictorSP(3);
        LiveWindow.addActuator("Pivot", "Angle Motor", (VictorSP) pivotAngleMotor);
        
        pivotHallEffect = new DigitalInput(6);
        LiveWindow.addSensor("Pivot", "Hall Effect", pivotHallEffect);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
