// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.sirius;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeft1;
    public static SpeedController driveTrainLeft2;
    public static SpeedController driveTrainRight1;
    public static SpeedController driveTrainRight2;
    public static RobotDrive driveTrainRobotDrive;
    public static DoubleSolenoid driveTrainShifter;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static Compressor kompressorkompressor;
    public static SpeedController collectorIntake;
    public static DigitalInput collectorBoulderinCollector;
    public static DoubleSolenoid collectorArm;
    public static CANTalon shooterRightFly;
    public static CANTalon shooterLeftFly;
    public static DigitalInput shooterBeamBreak;
    public static DoubleSolenoid shooterKicker;
    public static SpeedController pivotAngleMotor;
    public static Encoder pivotAngleEncoder;
    public static DigitalInput pivotHallEffect;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeft1 = new VictorSP(8);
        LiveWindow.addActuator("Drive Train", "Left 1", (VictorSP) driveTrainLeft1);
        
        driveTrainLeft2 = new VictorSP(9);
        LiveWindow.addActuator("Drive Train", "Left 2", (VictorSP) driveTrainLeft2);
        
        driveTrainRight1 = new VictorSP(6);
        LiveWindow.addActuator("Drive Train", "Right 1", (VictorSP) driveTrainRight1);
        
        driveTrainRight2 = new VictorSP(7);
        LiveWindow.addActuator("Drive Train", "Right 2", (VictorSP) driveTrainRight2);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeft1, driveTrainLeft2,
              driveTrainRight1, driveTrainRight2);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainShifter = new DoubleSolenoid(11, 4, 5);
        LiveWindow.addActuator("Drive Train", "Shifter", driveTrainShifter);
        
        driveTrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Encoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Encoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        kompressorkompressor = new Compressor(11);
        
        
        collectorIntake = new VictorSP(2);
        LiveWindow.addActuator("Collector", "Intake", (VictorSP) collectorIntake);
        
        collectorBoulderinCollector = new DigitalInput(4);
        LiveWindow.addSensor("Collector", "Boulder in Collector", collectorBoulderinCollector);
        
        collectorArm = new DoubleSolenoid(11, 0, 1);
        LiveWindow.addActuator("Collector", "Arm", collectorArm);
        
        shooterRightFly = new CANTalon(1);
        LiveWindow.addActuator("Shooter", "Right Fly", shooterRightFly);
        
        shooterLeftFly = new CANTalon(2);
        LiveWindow.addActuator("Shooter", "Left Fly", shooterLeftFly);
        
        shooterBeamBreak = new DigitalInput(5);
        LiveWindow.addSensor("Shooter", "Beam Break", shooterBeamBreak);
        
        shooterKicker = new DoubleSolenoid(11, 2, 3);
        LiveWindow.addActuator("Shooter", "Kicker", shooterKicker);
        
        pivotAngleMotor = new VictorSP(3);
        LiveWindow.addActuator("Pivot", "Angle Motor", (VictorSP) pivotAngleMotor);
        
        pivotAngleEncoder = new Encoder(7, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("Pivot", "Angle Encoder", pivotAngleEncoder);
        pivotAngleEncoder.setDistancePerPulse(1.0);
        pivotAngleEncoder.setPIDSourceType(PIDSourceType.kRate);
        pivotHallEffect = new DigitalInput(6);
        LiveWindow.addSensor("Pivot", "Hall Effect", pivotHallEffect);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
