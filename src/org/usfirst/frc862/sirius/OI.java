// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.sirius;

import org.usfirst.frc862.sirius.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public JoystickButton visionRotoateButton;
    public JoystickButton visionShootButton;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton autoCollect;
    public JoystickButton lowerArmCommand;
    public JoystickButton raiseArmButton;
    public JoystickButton ejectCommand;
    public JoystickButton stopstuff;
    public JoystickButton collectButton;
    public Joystick gamepad;
    public JoystickButton upshiftButton;
    public JoystickButton rotateLeftButton;
    public JoystickButton rotateRightButton;
    public Joystick leftJoystick;
    public JoystickButton downshiftButton;
    public JoystickButton rotateLeftButton2;
    public JoystickButton rotateRightButton2;
    public Joystick rightJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        
        rotateRightButton2 = new JoystickButton(rightJoystick, 1);
        rotateRightButton2.whileHeld(new RotateToDeltaAngle(0));
        rotateLeftButton2 = new JoystickButton(rightJoystick, 1);
        rotateLeftButton2.whileHeld(new RotateToDeltaAngle(20));
        downshiftButton = new JoystickButton(rightJoystick, 1);
        downshiftButton.whenPressed(new DownShift());
        leftJoystick = new Joystick(0);
        
        rotateRightButton = new JoystickButton(leftJoystick, 3);
        rotateRightButton.whileHeld(new RotateToDeltaAngle(-20));
        rotateLeftButton = new JoystickButton(leftJoystick, 4);
        rotateLeftButton.whileHeld(new RotateToDeltaAngle(20));
        upshiftButton = new JoystickButton(leftJoystick, 1);
        upshiftButton.whenPressed(new UpShift());
        gamepad = new Joystick(2);
        
        collectButton = new JoystickButton(gamepad, 3);
        collectButton.whileHeld(new Collect());
        stopstuff = new JoystickButton(gamepad, 8);
        stopstuff.whenPressed(new StopFlywheels());
        ejectCommand = new JoystickButton(gamepad, 5);
        ejectCommand.whileHeld(new Eject());
        raiseArmButton = new JoystickButton(gamepad, 4);
        raiseArmButton.whenPressed(new RaiseArm());
        lowerArmCommand = new JoystickButton(gamepad, 2);
        lowerArmCommand.whenPressed(new LowerArm());
        autoCollect = new JoystickButton(gamepad, 6);
        autoCollect.whenPressed(new AutomatedBoulderCollect());


        // SmartDashboard Buttons
        SmartDashboard.putData("Do Nothing", new DoNothing());
        SmartDashboard.putData("Tank Drive", new TankDrive());
        SmartDashboard.putData("Collect Boulder", new CollectBoulder());
        SmartDashboard.putData("Up Shift", new UpShift());
        SmartDashboard.putData("Raise Arm", new RaiseArm());
        SmartDashboard.putData("Eject", new Eject());
        SmartDashboard.putData("Lower Arm", new LowerArm());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("Prep Shooter", new PrepShooter());
        SmartDashboard.putData("Boulder to Shooter", new BouldertoShooter());
        SmartDashboard.putData("Automated Boulder Collect", new AutomatedBoulderCollect());
        SmartDashboard.putData("Pivot to Intake", new PivottoIntake());
        SmartDashboard.putData("Pivot to Hardstop", new PivottoHardstop());
        SmartDashboard.putData("PivotToAngle: HARDSTOP", new PivotToAngle(0));
        SmartDashboard.putData("PivotToAngle: LOAD BOULDER", new PivotToAngle(15));
        SmartDashboard.putData("PivotToAngle: CEILING", new PivotToAngle(40));
        SmartDashboard.putData("PivotToAngle: LOW", new PivotToAngle(5));
        SmartDashboard.putData("PivotToAngle: MID", new PivotToAngle(10));
        SmartDashboard.putData("Stop Flywheels", new StopFlywheels());
        SmartDashboard.putData("Automated Shoot", new AutomatedShoot());
        SmartDashboard.putData("Down Shift", new DownShift());
        SmartDashboard.putData("Manual Pivot Control", new ManualPivotControl());
        SmartDashboard.putData("Rotate To Delta Angle: ORIGIN", new RotateToDeltaAngle(0));
        SmartDashboard.putData("Rotate To Delta Angle: LEFT", new RotateToDeltaAngle(20));
        SmartDashboard.putData("Rotate To Delta Angle: RIGHT", new RotateToDeltaAngle(-20));
        SmartDashboard.putData("Drive Over Obstacle", new DriveOverObstacle());
        SmartDashboard.putData("Shoot Override", new ShootOverride());
        SmartDashboard.putData("DriveForNSeconds: Three", new DriveForNSeconds(3));
        SmartDashboard.putData("DriveForNSeconds: Five", new DriveForNSeconds(5));
        SmartDashboard.putData("DriveForNSeconds: Seven", new DriveForNSeconds(7));
        SmartDashboard.putData("Collect", new Collect());
        SmartDashboard.putData("Wait For Vision", new WaitForVision());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        visionRotoateButton = new JoystickButton(leftJoystick, 2);
        visionRotoateButton.whileHeld(new VisionRotate());
        visionShootButton = new JoystickButton(gamepad, 1);
        visionShootButton.whenPressed(new VisionShoot());
        
        SmartDashboard.putData("Vision Rotate", new VisionRotate());
        SmartDashboard.putData("Vision Pivot", new VisionPivot());
        SmartDashboard.putData("Vision Shoot", new VisionShoot());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getGamepad() {
        return gamepad;
    }

    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

