// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc862.sirius;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc862.sirius.commands.Aim;
import org.usfirst.frc862.sirius.commands.AimandFire;
import org.usfirst.frc862.sirius.commands.AimtoTower;
import org.usfirst.frc862.sirius.commands.Aligntotower;
import org.usfirst.frc862.sirius.commands.AquireTower;
import org.usfirst.frc862.sirius.commands.AutoIntakeBoulder;
import org.usfirst.frc862.sirius.commands.CollectBoulder;
import org.usfirst.frc862.sirius.commands.CrossDefense;
import org.usfirst.frc862.sirius.commands.DoNothing;
import org.usfirst.frc862.sirius.commands.EjectBoulder;
import org.usfirst.frc862.sirius.commands.FullPowerShot;
import org.usfirst.frc862.sirius.commands.LoadBoulder;
import org.usfirst.frc862.sirius.commands.LowerCollector;
import org.usfirst.frc862.sirius.commands.ManualPivotControl;
import org.usfirst.frc862.sirius.commands.RaiseCollector;
import org.usfirst.frc862.sirius.commands.ShootBoulder;
import org.usfirst.frc862.sirius.commands.ShootertoAngle;
import org.usfirst.frc862.sirius.commands.SpinUpFlyWheels;
import org.usfirst.frc862.sirius.commands.StopFlyWheels;
import org.usfirst.frc862.sirius.commands.TeleopDrive;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a
    //// joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driverLeft;
    public Joystick driverRight;
    public JoystickButton joystickButton1;
    public Joystick coPilot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        coPilot = new Joystick(2);
        
        joystickButton1 = new JoystickButton(coPilot, 1);
        joystickButton1.whileHeld(new ShootBoulder());
        driverRight = new Joystick(1);
        
        driverLeft = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Do Nothing", new DoNothing());
        SmartDashboard.putData("Teleop Drive", new TeleopDrive());
        SmartDashboard.putData("Collect Boulder", new CollectBoulder());
        SmartDashboard.putData("Raise Collector", new RaiseCollector());
        SmartDashboard.putData("Lower Collector", new LowerCollector());
        SmartDashboard.putData("Eject Boulder", new EjectBoulder());
        SmartDashboard.putData("Shooter to Angle: Boulder Intake", new ShootertoAngle(40));
        SmartDashboard.putData("Load Boulder", new LoadBoulder());
        SmartDashboard.putData("Spin Up Fly Wheels: max", new SpinUpFlyWheels(1));
        SmartDashboard.putData("Spin Up Fly Wheels: intake", new SpinUpFlyWheels(-0.4));
        SmartDashboard.putData("Spin Up Fly Wheels: stop", new SpinUpFlyWheels(0));
        SmartDashboard.putData("Shoot Boulder", new ShootBoulder());
        SmartDashboard.putData("Align to tower", new Aligntotower());
        SmartDashboard.putData("Aim to Tower", new AimtoTower());
        SmartDashboard.putData("Auto Intake Boulder", new AutoIntakeBoulder());
        SmartDashboard.putData("Full Power Shot", new FullPowerShot());
        SmartDashboard.putData("Manual Pivot Control", new ManualPivotControl());
        SmartDashboard.putData("Aim", new Aim());
        SmartDashboard.putData("Aquire Tower", new AquireTower());
        SmartDashboard.putData("Aim and Fire", new AimandFire());
        SmartDashboard.putData("Stop Fly Wheels", new StopFlyWheels());
        SmartDashboard.putData("Cross Defense", new CrossDefense());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverLeft() {
        return driverLeft;
    }

    public Joystick getDriverRight() {
        return driverRight;
    }

    public Joystick getCoPilot() {
        return coPilot;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
