// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.sirius.subsystems;

import org.usfirst.frc862.sirius.Robot;
import org.usfirst.frc862.sirius.RobotMap;
import org.usfirst.frc862.sirius.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {
	
	static final double SHOOT_POWER = 1;
	static final double INTAKE_POWER = -0.5;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon flywheelLeft = RobotMap.shooterFlywheelLeft;
    private final CANTalon flywheelRight = RobotMap.shooterFlywheelRight;
    private final DoubleSolenoid kicker = RobotMap.shooterKicker;
    private final DigitalInput beamBreak = RobotMap.shooterBeamBreak;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void intake(){
    	flywheelLeft.set(INTAKE_POWER);
    	flywheelRight.set(INTAKE_POWER);
    }
    
    public void shootPrep(){
    	flywheelLeft.set(SHOOT_POWER);
    	flywheelRight.set(SHOOT_POWER);
    }
    
    public void shoot(){
    	kicker.set(Value.kForward);
    }
    
    public void stopWheels(){
    	flywheelLeft.set(0);
    	flywheelRight.set(0);
    }

    public void retract() {
        kicker.set(Value.kReverse);
    }
}

